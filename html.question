<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StackIt - Q&A Platform</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css">
    <style>
        :root {
            --primary-green: #2e7d32;
            --dark-green: #1b5e20;
            --light-green: #e8f5e9;
            --accent-green: #43a047;
        }
        
        body {
            background-color: #f8f9fa;
        }
        
        .navbar {
            background-color: var(--primary-green) !important;
        }
        
        .btn-primary, .btn-success {
            background-color: var(--primary-green);
            border-color: var(--primary-green);
        }
        
        .btn-primary:hover, .btn-success:hover {
            background-color: var(--dark-green);
            border-color: var(--dark-green);
        }
        
        .card-header {
            background-color: var(--primary-green) !important;
            color: white;
        }
        
        .tag {
            background-color: var(--light-green);
            color: var(--dark-green);
        }
        
        .editor-toolbar {
            background-color: var(--light-green);
            border-radius: 5px 5px 0 0;
        }
        
        .editor-content {
            min-height: 200px;
            border: 1px solid #dee2e6;
            border-top: none;
            border-radius: 0 0 5px 5px;
            padding: 10px;
        }
        
        .hljs {
            background: #f8f9fa;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="#"><i class="fas fa-layer-group me-2"></i>StackIt</a>
            <div class="d-flex">
                <button class="btn btn-outline-light me-2"><i class="fas fa-moon"></i></button>
                <img src="https://via.placeholder.com/40" class="rounded-circle" alt="Profile">
            </div>
        </div>
    </nav>

    <div class="container my-4">
        <div class="row">
            <!-- Main Content -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4><i class="fas fa-question-circle me-2"></i>Ask Question</h4>
                    </div>
                    <div class="card-body">
                        <form id="questionForm">
                            <div class="mb-3">
                                <label class="form-label">Title</label>
                                <input type="text" class="form-control" id="questionTitle" required>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <div class="editor-toolbar mb-0 p-2">
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-cmd="bold"><i class="fas fa-bold"></i></button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-cmd="italic"><i class="fas fa-italic"></i></button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-cmd="insertunorderedlist"><i class="fas fa-list-ul"></i></button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-cmd="insertorderedlist"><i class="fas fa-list-ol"></i></button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-cmd="createlink"><i class="fas fa-link"></i></button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" id="uploadImage"><i class="fas fa-image"></i></button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" id="addCode"><i class="fas fa-code"></i></button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" id="previewBtn"><i class="fas fa-eye"></i> Preview</button>
                                </div>
                                <div class="editor-content" id="questionDescription" contenteditable="true"></div>
                                <div id="previewContainer" class="mt-2 d-none"></div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Tags</label>
                                <input type="text" class="form-control" id="tagInput" placeholder="Type tag and press Enter">
                                <div id="tagsContainer" class="d-flex flex-wrap mt-2"></div>
                                <div id="tagSuggestions" class="dropdown-menu"></div>
                            </div>
                            
                            <button type="submit" class="btn btn-success"><i class="fas fa-paper-plane me-2"></i>Submit</button>
                        </form>
                    </div>
                </div>
            </div>
            
            <!-- Sidebar -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-tags me-2"></i>Popular Tags</h5>
                    </div>
                    <div class="card-body" id="popularTags">
                        <!-- Filled by API -->
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-users me-2"></i>Top Users</h5>
                    </div>
                    <div class="card-body" id="topUsers">
                        <!-- Filled by API -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.2.12/marked.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize APIs
            initEditor();
            initTagSystem();
            loadPopularTags();
            loadTopUsers();
            
            // Form submission
            document.getElementById('questionForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                await submitQuestion();
            });
        });

        // 1. Rich Text Editor with Markdown API
        function initEditor() {
            const editor = document.getElementById('questionDescription');
            const previewContainer = document.getElementById('previewContainer');
            
            // Toolbar buttons
            document.querySelectorAll('[data-cmd]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const cmd = this.getAttribute('data-cmd');
                    if (cmd === 'createlink') {
                        const url = prompt('Enter URL:');
                        if (url) document.execCommand(cmd, false, url);
                    } else {
                        document.execCommand(cmd, false, null);
                    }
                    editor.focus();
                });
            });
            
            // Image Upload (using ImgBB API)
            document.getElementById('uploadImage').addEventListener('click', function() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';
                input.onchange = async () => {
                    const file = input.files[0];
                    const formData = new FormData();
                    formData.append('image', file);
                    
                    try {
                        const response = await fetch('https://api.imgbb.com/1/upload?key=YOUR_IMGBB_API_KEY', {
                            method: 'POST',
                            body: formData
                        });
                        const data = await response.json();
                        document.execCommand('insertImage', false, data.data.url);
                    } catch (error) {
                        console.error('Image upload failed:', error);
                    }
                };
                input.click();
            });
            
            // Code Block (using Highlight.js)
            document.getElementById('addCode').addEventListener('click', function() {
                const language = prompt('Enter language (javascript, python, etc):', 'javascript');
                const code = prompt('Enter your code:');
                if (code) {
                    const codeBlock = `<pre><code class="language-${language}">${code}</code></pre>`;
                    document.execCommand('insertHTML', false, codeBlock);
                    hljs.highlightAll();
                }
            });
            
            // Markdown Preview (using marked.js)
            document.getElementById('previewBtn').addEventListener('click', function() {
                if (previewContainer.classList.contains('d-none')) {
                    previewContainer.innerHTML = marked.parse(editor.innerHTML);
                    previewContainer.classList.remove('d-none');
                    this.innerHTML = '<i class="fas fa-edit"></i> Edit';
                } else {
                    previewContainer.classList.add('d-none');
                    this.innerHTML = '<i class="fas fa-eye"></i> Preview';
                }
            });
        }

        // 2. Tag System with StackExchange API
        function initTagSystem() {
            const tagInput = document.getElementById('tagInput');
            const tagsContainer = document.getElementById('tagsContainer');
            const suggestions = document.getElementById('tagSuggestions');
            let tags = [];
            
            tagInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    addTag(this.value.trim());
                    this.value = '';
                    suggestions.classList.remove('show');
                }
            });
            
            tagInput.addEventListener('input', async function() {
                const query = this.value.trim();
                if (query.length > 2) {
                    const response = await fetch(`https://api.stackexchange.com/2.3/tags?order=desc&sort=popular&inname=${query}&site=stackoverflow`);
                    const data = await response.json();
                    showTagSuggestions(data.items.slice(0, 5));
                } else {
                    suggestions.classList.remove('show');
                }
            });
            
            function showTagSuggestions(tagList) {
                suggestions.innerHTML = '';
                tagList.forEach(tag => {
                    const item = document.createElement('button');
                    item.className = 'dropdown-item';
                    item.textContent = tag.name;
                    item.onclick = () => {
                        addTag(tag.name);
                        tagInput.value = '';
                        suggestions.classList.remove('show');
                    };
                    suggestions.appendChild(item);
                });
                suggestions.classList.add('show');
            }
            
            function addTag(tag) {
                if (!tag || tags.length >= 5 || tags.includes(tag)) return;
                tags.push(tag);
                
                const tagElement = document.createElement('span');
                tagElement.className = 'badge tag me-2 mb-2';
                tagElement.innerHTML = `
                    ${tag} <button type="button" class="btn-close btn-close-white btn-sm ms-1"></button>
                `;
                
                tagElement.querySelector('.btn-close').addEventListener('click', () => {
                    tags = tags.filter(t => t !== tag);
                    tagsContainer.removeChild(tagElement);
                });
                
                tagsContainer.appendChild(tagElement);
            }
        }

        // 3. Load Popular Tags (StackExchange API)
        async function loadPopularTags() {
            const response = await fetch('https://api.stackexchange.com/2.3/tags?order=desc&sort=popular&site=stackoverflow');
            const data = await response.json();
            const container = document.getElementById('popularTags');
            
            data.items.slice(0, 10).forEach(tag => {
                const tagElement = document.createElement('span');
                tagElement.className = 'badge tag me-1 mb-1';
                tagElement.textContent = tag.name;
                container.appendChild(tagElement);
            });
        }

        // 4. Load Top Users (Dummy API - replace with your backend)
        async function loadTopUsers() {
            // In a real app, you would fetch from your backend
            const users = [
                { name: 'JohnDoe', points: 1250 },
                { name: 'JaneSmith', points: 1100 },
                { name: 'DevGuru', points: 980 },
                { name: 'CodeMaster', points: 875 },
                { name: 'PythonLover', points: 760 }
            ];
            
            const container = document.getElementById('topUsers');
            users.forEach(user => {
                const userElement = document.createElement('div');
                userElement.className = 'd-flex justify-content-between mb-2';
                userElement.innerHTML = `
                    <span><i class="fas fa-user me-2"></i>${user.name}</span>
                    <span class="badge bg-success">${user.points} pts</span>
                `;
                container.appendChild(userElement);
            });
        }

        // 5. Submit Question (Mock API)
        async function submitQuestion() {
            const question = {
                title: document.getElementById('questionTitle').value,
                content: document.getElementById('questionDescription').innerHTML,
                tags: Array.from(document.querySelectorAll('#tagsContainer .badge')).map(b => b.textContent.trim())
            };
            
            // In a real app, you would send to your backend
            console.log('Submitting question:', question);
            
            // Mock API response
            setTimeout(() => {
                alert('Question submitted successfully!');
                document.getElementById('questionForm').reset();
                document.getElementById('questionDescription').innerHTML = '';
                document.getElementById('tagsContainer').innerHTML = '';
            }, 1000);
        }
    </script>
</body>
</html>